name: Draft stable

on:
  push:
    branches:
      - 'release/stable/**'
  pull_request:
    branches:
      - 'release/stable/**'
    types: [opened, synchronize]

env:
  CARGO_TERM_COLOR: always

jobs:
  draft_stable:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      # Extract branch info
      - name: Set info
        run: |
          echo "CHANNEL=$(echo ${GITHUB_REF} | awk -F/ '{print $4}')" >> $GITHUB_ENV
          echo "VERSION=$(echo ${GITHUB_REF} | awk -F/ '{print $5}')" >> $GITHUB_ENV
      # Print info for debug
      - name: Print Info
        run: |
          echo $GITHUB_REF
          echo $CHANNEL
          echo $VERSION

      # Cache Rust
      - uses: actions/cache@v3
        with:
          path: ./src-tauri/target
          key: ${{ hashFiles('./src-tauri/Cargo.lock') }}

      # Cache Rust
      - uses: actions/cache@v3
        with:
          path: ~/.cargo
          key: ${{ hashFiles('./src-tauri/Cargo.lock') }}

      # Cache Node
      - uses: actions/cache@v3
        with:
          path: ./node_modules
          key: ${{ hashFiles('./package-lock.json') }}

      # Cache Next.js
      - uses: actions/cache@v3
        with:
          path: ./src-next/.next
          key: ${{ hashFiles('./src-next/package-lock.json') }}

      - name: Install Tauri dependencies
        run: |
          sudo apt-get update
          sudo apt-get install javascriptcoregtk-4.1 libsoup-3.0 webkit2gtk-4.1 libayatana-appindicator3-dev librsvg2-dev -y

      - name: Install node dependencies
        run: npm install

      - name: Build application
        run: npm run tauri build

      - name: Test if release already exists
        id: release-exists
        continue-on-error: true
        run: gh release view $VERSION-$CHANNEL
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      - name: Create draft release
        if: steps.release-exists.outcome == 'failure' && steps.release-exists.conclusion == 'success'
        run: |
          gh release create -d \
            $VERSION-$CHANNEL \
            -t $VERSION-$CHANNEL \
            -F ./CHANGELOG.md \
            ./src-tauri/target/release/bundle/deb/wireguard-gui_${VERSION}_amd64.deb#wireguard-gui_amd64.deb \
            ./src-tauri/target/release/bundle/appimage/wireguard-gui_${VERSION}_amd64.AppImage#wireguard-gui_amd64.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
      - name: Update draft release
        if: steps.release-exists.outcome == 'success' && steps.release-exists.conclusion == 'success'
        run: |
          gh release delete-asset -y \
            $VERSION-$CHANNEL \
            wireguard-gui_${VERSION}_amd64.deb || true
          gh release delete-asset -y \
            $VERSION-$CHANNEL \
            wireguard-gui_${VERSION}_amd64.AppImage|| true
          gh release upload \
            $VERSION-$CHANNEL \
            ./src-tauri/target/release/bundle/deb/wireguard-gui_${VERSION}_amd64.deb#wireguard-gui_amd64.deb
          gh release upload \
            $VERSION-$CHANNEL \
            ./src-tauri/target/release/bundle/appimage/wireguard-gui_${VERSION}_amd64.AppImage#wireguard-gui_amd64.AppImage
        env:
          GITHUB_TOKEN: ${{ secrets.CI_TOKEN }}
